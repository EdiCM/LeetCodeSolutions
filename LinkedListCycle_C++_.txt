// https://leetcode.com/problems/linked-list-cycle/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {

        if (!head || !head -> next) return false; // sin nodos o solo 1 nodo

        ListNode *slow = head;
        ListNode *fast = head;


        while (fast && fast -> next) {
            
            slow = slow -> next;
            fast = fast -> next -> next;
            if (fast == slow) return true;
        }

        return false;
        // trasverse my linked list with two pointers
        // slow increasing by 1 and fast increasing by 2
        // if fast reaches a null, no cycle
        // if fast and slow meet, theres a cycle
    }
};